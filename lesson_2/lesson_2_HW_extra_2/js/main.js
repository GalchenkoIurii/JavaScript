//let x = 5;
//alert(x++); // 5, так как постфиксный инкремент увеличивает переменную
// после операции, то сначала выводится предыдущее значение, а потом увеличивается на 1


//console.log([] + false - null + true); // NaN, арифметические операции с false
// преобразуют в 0, а true в 1, пустой массив даст undefined, который преобразуется в NaN


// let y = 1;
// let x = y = 2;
// alert(x); // 2, при инициализации y = 1, в следующей строке в переменную y
// записывается 2, множественное присваивание


// console.log([] + 1 + 2); // 12, у массива есть метод toString, который
// при арифметических операциях преобразовывает цифры в строки и конкатенирует их


// alert("1"[0]); // 1, "1"-строка, и по индексу также как в массиве можем получить
// доступ к элементу строки


// console.log(2 && 1 && null && 0 && undefined); // null, в логических операторах
// null интерпретируется как false, а операция логического И возвращает первое
// ложное значение


// let a = 1, b = 2;
// console.log( !!(a && b) ); // true, двойное не используется для преобразования
// к логическому типу данных, 1 И 2 дадут true
// console.log(a && b); // 2, оператор И возвращает первое ложное значение,
// а если такого нет, то последнее, это 2


//alert(null || 2 && 3 || 4); // 3, в первой части выражения оператор ИЛИ вернет
// первое значение true - это 2, а во втором это 3, потом оператор И вернет последнее (3)
// так как ложного нет


// let a = [1, 2, 3], 
// 	b = [1, 2, 3];
// console.log(a == b); // false, массив а и массив b - это два разных объекта,
// при их сравнении сравниваются их адреса (которые разные), а не значения, которые
// в них хранятся


//alert(+"Infinity"); // Infinity, бесконечность остается бесконечностью


// let yojik = "ёжик",
// apple = "яблоко";
// console.log(yojik > apple); // true, при сравнении строк сравниваются 
// номера их символов unicode, начиная с первого, буква ё находится дальше 
// в таблице чем буква я, поэтому имеет больший номер 


//console.log(0 || "" || 2 || undefined || true || false); // 2, операция ИЛИ
// возвращает первое значение, являющееся true, 0 - false, пустая строка - 0, тоже false




